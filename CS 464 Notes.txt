CS 464 Notes
Spring 2018


lecture 1  - OS definition
===============================================================================
What is open source software?

	-> source code is shared to edit and redistrib
		-> even repackage as a new project

	-> collaborative internet-based development

	-> meritocracy, best code/ideas win out
		-> anyone welcome to make contributions

	^^ Not all are necessarily true


Formal def:
	-> goverend by Open Source Inititative (OSI) approved license


1) require - free redistribution

2) require sharing of - source code

3) allow - derived works

4) maintain - integrity of author's source code

5) no discrimination against persons or groups

6) no discrim against fields of endeavor

7) distrib of license

8) license must not be specific to a product

9) license must not restrict other software

10) license must be technology neutral


Key take away:

"free and open source"

FREE AS IN FREEDOM, NOT AS IN BEER



lecture 2 - history of OS
===============================================================================

Technically.. this was the norm at the beginning of computers as software sharing was
	encourage by IBM to get more people to use computers (and hardware sales)

~1970's - software starting to gain traction (showing the value, improve value, etc.. w/o new hardaware)

Diamond V. Diehr (1981)
	-> US supreme court forces patent office to recoginze software algos patents
	-> forced open flood gates on software patents and possible rapid growth of purely
		software companies like Microsoft

Emergence of proprietary software

	-> sw controlled and owned by 1 actor

	-> to protect ownership, code is tightly controlled
		-> only authorized ppl allowed to view and edit

	-> this control and secrecy surroundign how things are done are seen as key to
		controlling the value of SW

		(dependent on vender for updates, etc..)


AT&T looked to close off UNIX, so Richard Stallman and the Free Software Foundation came along

	-> GNU public license (GNU's Not Unix)
		-> gnu c compiler (gcc)

GNU Public License (GPL)

	-> first free, or Open Software Licenses
		-> many current ones build on this

	4 Freedoms (rights, not cost)
		1) to use
		2) to copy
		3) to modify
		4) to contribute

	-> struggled w/ acceptance for corporate space
		-> enter the Open Source Initiative 
			-> designed to make "free software" more acceptable

Open Source = dev methodology
Free Software = social movement




Book chapter 1
-------------------------------------------------------------------------

One of the most common mistakes - unrealistic expectations
	-> opening a project can add a whole new set of complexities and possibly cost more in the short term

Related mistake - skimping on presentation and packaging
	-> need to clear barriers for newcomers

Mgmt in open source isnt always very visibile, but is usually happening behind the scenes in successful projects


History:
	
	early period had little standaridztion of hardware
		-> led to architecture expertise rather than language expertise
		-> in manufacturers best interest

	no widespread internet
		-> getting data from place to place was inconvenient and cumbersome
		-> assisted by knowledge sharing expectation due to many devs working at universities

Rise of Proprietary Software and Free Software

	2 things occured gradually:
		1) hardware designs gave way to a few clear winners (tech, marketing, or both)

		2) dev of "high level" langs which coudl compile to run on diff kinds of computers
			-> not locked into manufacturer

	Software become a differentiator.  Selling or treating it as an integral part of hardware sales began to look like a goo strategy.
		-> M's had to start enforcing copyrights more strictly
		-> sharing could implement "added value" features being sold (or get into competitor hands)


Stallman noticed that the community cooperation was becoming forbidden due to proprietary software and decided to resist the trend.
	-> Started GNU Project and the Free Software Foundation (FSF)
		-> GNU Goal: dev completely free and open computer operating system and body of application software (GNU's Not Unix), which users would never be prevented from hacking or from sharing their mods.

		-> dev'd GNU General Public License (GPL)
			-> copy'd and mod'd w/o restriction
				-> both copies and derivative workds must be distrubted under same license as OG
			-> prevents EVERYONE/ANYONE from limiting distribution

	FSF struggled w/ their kernal -> in comes L.T. w/ his Linux kernel
		-> add existing GNU pgms and other free SW (X Windows System)
			-> 1st free OS

	BSD - Berkeley Software Distribution
		-> gradual reimplemenetation of the UNIX OS



"Free" Versus "Open Source"

	"free software" DNE "zero-cost software"
		-> all free software is zero-cost, but not all zero-cost is free as in "freedom"
			(freedom to modify)

	gratis = free, w/o charge
	libre = free, at liberty

1998: Open Source termed as an alternative to "free" by those who became OSI
	-> contributions are evaluated on technical grounds
		-> not motivations





lecture 3 - Anatomy of an Open Source Project
============================================================================================

Tools have 3 groups:

	1) Communication tools
		-> IRC
			LCD for Real time comm
			div'd into #channels
			non-persistent w/ limited flow control
			chat for quick answers
			etc..

		-> Mailing Lists
			simple redistribution and carchiving mechanism
			hash out designs/reqs/distro
			etiquette

			recommended to start "lurking" to figure out who is who

		-> web/wiki pages
			the projects' public face
			contains info about project, members, IRC channel, possibly design docs, code repo, bug tracker, etc..

	2) Coordination Tools
		-> bug trackers (most important)
				Depends on users to find bugs (enough eyeballs)

				Ex: Bugzilla, Trac, Redmine, Jira

				database, front-end tracking
					-> outstanding issues
					-> causes
					-> who is working on them
					-> current status and priority

		-> feature requests (2nd important)

	3) Coding tools
		-> code management systems (git, hg, SVN, CVS)



Book, chapter 3 - Techncial Infrastructure
----------------------------------------------------------------------------------------------

Good information mgmt is what prevents open source projects from collapsing under the weight of Brooks' Law
	-> Brooks' Law = adding manpower to a late software project makes it later
		-> this is due to each person no longer being able to remain aware of what everyone else it doing (as # of ppl grow)



What a Project Needs:

	Web site
	Mailing lists / Msg forums
	Version control
	Bug Tracking
	Real-time chat


	Web Site:
		devoted to helping people participate in the project (different than the public facing one)
			-> could be 1 for broad users who want to get involved
			-> 1 for developers
			-> 1 for public

				You might have less for small projects.  Need to determine what is right for you.


	Canned Hosting:
		-> online service that offers some or all of the online collab tools needed to run a free software project
			minimum: version control repo, bug tracking.  Most offer wiki, may offer mailing list hosting, some offer continuous integration testing and other services

		2 main advs:
			1) server capactiy and bandwidth
			2) simplicity
				-> they already chose and setup everything for you!

		disadv:
			you must accept their choices and configs
				-> try to arrange things so you aren't locked in if you need to switch later

		
	Mailing Lists / Message Forums
		-> larger, more complex projects will benefit from the forums
		-> these 2 terms are becoming nearly unified

		-> should have a prominently placed description of all available public forms
			-> guide newcomers


	Choosing the right forum mgmt software

		Need to consider these:
			i) both email and web-based access
			ii) moderation features
			iii) rich admin interface
			iv) header manipulation
				-> (email filtering and replying rules)
			v) archiving


	Spam Prevention:

		Filtering posts: 3 basic techniques
			1) only auto-allow postings from list subscribers
				-> don't make others auto discard, go to a mod queue
				-> email addresses aren't reliable method of identifying ppl
					-> could reply from diff email or 1st time poster

			2) Filtering posts through spam-detection software

			3) Moderation
				-> mail routed to a specific holding area, where human examines it, then confirms or rejects it


	Archiving:
		Every discussion forum should be fully archived



Version Control:  version control system (or revision control system)
	-> combo of tech and practices for trackign and controlling changes to a project's files, particularly source code, documentation, and web pages

	Helps with almost every aspect of running a project:
		inter-dev comms
		release mgmt
		bug mgmt
		code stabilty and experimental dev efforts
		attribution and auth of changes by particular devs


	core = change mgmt


	Vocab:
		commit - make chng to project (to store the change in the version ctrl database)

		push - publish a commit to a publicly online repo

		pull - (update) to get project changes from project's mainline dev branch

		commit msg or log msg - commentary attached to each commit

		repository - db whr changes are stored and from which they are published

		clone (see also checkout) - to obtain one's own dev repo by making a copy of the project's central repo

		checkout - like clone, but obtains a working copy or working files from a repo

		working copy or working files - a dev's private directory tree contaiing the prj's source code files and possibly its web pages or other docs

		revision, change, changeset, or (again) commit - precisely spec'd incarnation of the prj at a pt in time

		diff - textual rep of a change, shows which lines were changed and how, plus a few surrounding context on either side

		tag or snapshot - label for a particular state of the project at a point in time.  Generally used to mark interesting snapshots of the project

		branch - copy of the project, isolated so changes made to this don't affect other branches

		merge or port - move chng from one branch to another.. merge can result in conflicts sometimes

		conflict - what happens when 2 ppl try to make diff chngs to the same place in the code.. human needs to resolve the conflict

		revert or reversion - under an already commited chng to the software

		lock - way to declare an exclusive intent to change a particular file or directory
			-> many require the lock-mod-unlock model


	VERSION EVERYTHING!!!
		-> keeps it organized, and good for tracking all updates


	Browsability
		-> prj's repo should be browsable on the web.
		-> ability to look ato both latest and earlier revisions/logs


	Use branches to avoid bottlenecks
		-> they turn a scarce resource - working room in the prj's code - into an abundant one.
		-> when branch is successful with implementing a feature/design, others examine a pull request
			-> if pull request result is good, system can do a merge to the master branch


	Singularity of Information
		never commit the same change twice
		use consistent syntax for changes


	Authorization
		most projects use honor system for commit access


	Receiving and Reviewing Contributions

		Pull Requests - primary method
			-> from contributor to the prj that a certain change be pulled into the prj
			-> change offered int he form of the diff b/w the contrib's copy and the prj's own copy


		Comit Notifications/Emails
			-> every commit or push containing a group of commits should generate a notification that goes out to a subscribable forum, such as an email sent to a mailing list
				-> include basic info about the change


Bug Tracker:










